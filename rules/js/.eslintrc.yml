root: true

# 对应环境下的全局变量
env:
  node: true
  es6: true
  browser: true
  jquery: true

# 解析选项
parserOptions:
  # ECMAScript 版本
  ecmaVersion: 2019
  # 源码类型
  # - script 常规脚本
  # - module 模块化
  sourceType: module

# 指定全局变量
# globals:

# 采用官方推荐规则
# extends: 'eslint:recommended'

# 本规则的定制顺序按照 eslint 官方网站的顺序进行，详情可参阅：`https://eslint.org/docs/rules/`

# 制定时间：2019 年 4 月 18 日

# 定制
rules:

  # ===============
  # Possible Errors
  # `https://eslint.org/docs/rules/#possible-errors`

  # for 循环的方向
  for-direction: 2

  # getter 必须给定返回值
  getter-return: 2

  # Promise 的参数不使用 async 语法
  no-async-promise-executor: 0

  # 在循环中不使用 await
  no-await-in-loop: 0

  # 不跟 -0 进行比较
  no-compare-neg-zero: 2

  # 不在条件语句里面进行赋值运算
  # if、for、while 和 do...while
  no-cond-assign: 2

  # 禁用 console
  no-console: 1

  # 禁止在条件中使用常量表达式
  no-constant-condition: [2, {checkLoops: true}]

  # 禁止在正则表达式中使用控制字符
  # 在 ASCII 中，0-31 范围内的控制字符是特殊的、不可见的字符
  no-control-regex: 2

  # 禁用 debugger
  no-debugger: 2

  # 禁止函数出现重名参数
  no-dupe-args: 2

  # 禁止字面量对象出现重名 key
  no-dupe-keys: 2

  # 禁止 switch 的 case 语句中出现的表达式
  no-duplicate-case: 2

  # 禁止出现空语句
  # 允许 catch 子句为空
  no-empty: [2, {allowEmptyCatch: true}]

  # 禁止正则表达式中出现空字符集
  no-empty-character-class: 2

  # 禁止对 catch 子句中的异常重新赋值
  no-ex-assign: 2

  # 禁止不必要的条件转换
  no-extra-boolean-cast: 1

  # 禁止不必要的括号
  # 这里不禁用
  no-extra-parens: 0

  # 禁止不必要的分号
  no-extra-semi: 1

  # 禁止函数重复声明赋值
  no-func-assign: 2

  # 禁止在嵌套的语句块中出现变量或函数声明
  # no-inner-declarations: 0
  no-inner-declarations: [2, functions]

  # 禁止无效的正则表达式
  no-invalid-regexp: 2

  # 禁止不规则的留白
  no-irregular-whitespace: [2, {skipStrings: true, skipComments: true, skipRegExps: true, skipTemplates: true}]

  # 正则表达式中禁止使用令人疑惑的字符集
  no-misleading-character-class: 0

  # 禁止将全局对象当作函数进行调用
  # 该规则禁止将 Math、JSON 和 Reflect 对象当作函数进行调用
  no-obj-calls: 2

  # 禁止直接使用 Object.prototypes 的内置属性
  no-prototype-builtins: 2

  # 禁止正则表达式中出现多个空格
  no-regex-spaces: 2

  # 禁止稀疏数组
  no-sparse-arrays: 2

  # 禁止在常规字符串中使用模板字符串
  no-template-curly-in-string: 0

  # 禁止出现令人迷惑的多行表达式
  no-unexpected-multiline: 2

  # 禁止出现不可达表达式
  # 禁止在 return、throw、continue 和 break 语句后出现不可达代码
  no-unreachable: 2

  # 禁止在 finally 语句块中出现控制流语句
  no-unsafe-finally: 2

  # 禁止在关系操作符的左侧进行取非
  no-unsafe-negation: 2

  # 使用 isNaN 来检测 NaN
  use-isnan: 2

  # yield 和 await 中使用原子操作
  require-atomic-updates: 1

  # 强制 typeof 与有效的字符串进行比较
  valid-typeof: 2

  # ==============
  # Best Practices
  # `https://eslint.org/docs/rules/#best-practices`

  # 强制 get 与 set 成对出现
  accessor-pairs: 2

  # 强制数组方法的回调函数中使用 return 语句
  array-callback-return: 2

  # 强制 var 变量在块级作用域之内
  block-scoped-var: 2

  # 强制在类中使用 this
  class-methods-use-this: 0

  # 限制代码嵌套的复杂程度
  # 默认值是 20
  complexity: 2
  # complexity: [2, 10]

  # 强制 return 语句一致
  consistent-return: 0

  # 花括号风格
  curly: [1, multi-line, consistent]
  # curly: [2, multi-line]

  # 要求 switch 语句中有 default 分支
  default-case: 0

  # 强制点号之前或之后换行
  # property 表示点号与属性同行
  # object 表示点号与对象同行
  dot-location: [2, property]

  # 强制使用点号
  # allowPattern 可以指定允许正则匹配
  # 这里放开 catch 的限制，允许 Promise 的 catch 操作
  dot-notation:
    - 1
    -
      allowKeywords: false
      allowPattern: catch

  # 使用全等进行判断
  eqeqeq: 2

  # 要求 for-in 中使用 if 语句
  guard-for-in: 0

  # 禁用 alert、prompt、confirm
  no-alert: 1

  # 禁用 caller 或 callee
  no-caller: 2

  # 禁止在 case 或 default 子句中使用声明
  no-case-declarations: 2

  # 禁止使用看起来像除法的正则表达式
  no-div-regex: 2

  # 禁止在 else 前有 return
  no-else-return: 2

  # 禁止空函数
  no-empty-function: 1

  # 禁止空解构
  no-empty-pattern: 2

  # 禁止与 null 进行比较
  # 如需要，请使用 `===`
  no-eq-null: 1

  # 禁用 eval
  no-eval: 1

  # 禁止扩展原生对象
  no-extend-native: 0

  # 禁止不必要的 bind
  no-extra-bind: 1

  # 禁止不必要的标签
  no-extra-label: 2

  # 禁止 case 语句空落
  no-fallthrough: 0

  # 禁止浮点小数
  # 即禁止前导 . 和拖尾 . 符号来表示浮点数，如 `.5`、`2.`
  no-floating-decimal: 2

  # 禁止覆盖原生对象
  no-global-assign: 2

  # 禁止使用短符号进行类型转换
  no-implicit-coercion: 0

  # 禁止全局范围内使用变量或函数声明
  no-implicit-globals: 0

  # 禁止使用隐式或者类似 eval 的方法
  # 如 setTimeout/setInterval 的参数为字符串 `setTimeout("alert('Hi!');", 100);`
  no-implied-eval: 2

  # 禁止 this 出现在类或类对象之外
  no-invalid-this: 0

  # 禁用对象的迭代器 __iterator__ 属性
  no-iterator: 2

  # 禁用 label 标签语句
  no-labels: 1

  # 禁用不必要的嵌套块
  no-lone-blocks: 2

  # 禁止循环中存在函数
  no-loop-func: 0

  # 禁用魔术数字
  # 这里的魔术数字指的是令人看不懂的数字
  no-magic-numbers: 0

  # 禁止多个空格
  # no-multi-spaces: 0
  no-multi-spaces:
    - 2
    -
      ignoreEOLComments: true
      exceptions:
        Property: true
        VariableDeclarator: true
        ImportDeclaration: true

  # 禁止多行字符串
  no-multi-str: 1

  # 禁止使用 new 带来的副作用
  no-new: 1

  # 禁用 Function 构造函数
  no-new-func: 1

  # 禁止原始包装实例
  # 即通过 new 操作符使用 String、Number 和 Boolean
  no-new-wrappers: 1

  # 禁用八进制字面量
  no-octal: 2

  # 禁止在字符串字面量中进行八进制转义
  no-octal-escape: 2

  # 禁止对函数的参数重新赋值
  no-param-reassign: 0

  # 禁用 __proto__
  # 使用 getPrototypeOf 代替
  no-proto: 2

  # 禁止重复声明
  no-redeclare: [2, {builtinGlobals: true}]

  # 禁止重写确定对象上的确定属性
  no-restricted-properties: 0

  # 禁止在 return 语句中赋值
  no-return-assign: 0

  # 禁止在 return 语句中使用 await
  no-return-await: 2

  # 禁用 `javascript:` 形式的 url
  no-script-url: 0

  # 禁止自身赋值
  no-self-assign: 0

  # 禁止自身比较
  no-self-compare: 2

  # 禁用逗号操作符
  no-sequences: 1

  # 限制抛出异常字面量
  no-throw-literal: 2

  # 禁止一成不变的循环条件
  no-unmodified-loop-condition: 2

  # 禁止未使用的表达式
  no-unused-expressions: [1, {allowShortCircuit: true, allowTernary: true, allowTaggedTemplates: true}]

  # 禁用未使用的标签
  no-unused-labels: 2

  # 禁止不必要的 call 或 apply
  no-useless-call: 0

  # 禁止不必要的 catch 语句
  no-useless-catch: 0

  # 禁止不必要的字符串拼接
  no-useless-concat: 0

  # 禁止不必要的转义
  no-useless-escape: 2

  # 禁止重复的 return 语句
  no-useless-return: 2

  # 禁用 void
  no-void: 1

  # 禁用警告注释
  no-warning-comments: 0

  # 禁用 with
  no-with: 2

  # 建议给正则表达式的捕获组命名
  prefer-named-capture-group: 0

  # 要求使用 Error 对象作为 reject 的参数
  prefer-promise-reject-errors: 0

  # 要求 parseInt 有基数
  radix: 1

  # 禁止在没有 await 语句的时候使用 async
  require-await: 2

  # 使用正则表达式的 u 标记
  require-unicode-regexp: 0

  # 要求变量声明放在作用域的顶部
  vars-on-top: 0

  # 要求 IIFE 使用括号括起来
  wrap-iife: 0

  # Yoda 条件
  # 字面量放在前面的条件判断称之为 yoda 条件
  yoda: 0

  # ===========
  # Strict Mode

  # 采用严格模式
  strict: 0

  # ===========
  # Variables
  # `https://eslint.org/docs/rules/#variables`

  # 变量声明时进行初始化
  init-declarations: 0

  # 禁止 catch 语句中的覆盖变量
  no-catch-shadow: 0

  # 禁止删除变量
  no-delete-var: 2

  # 禁止变量与标签重名
  no-label-var: 2

  # 禁止指定的全局变量
  no-restricted-globals: 0
  # no-restricted-globals:
  #   - 2
  #   - event
  #   - fdescribe

  # 禁止变量覆盖外层作用域的变量
  no-shadow: 1

  # 关键字不能被遮蔽
  no-shadow-restricted-names: 0

  # 禁止未声明的变量
  no-undef: 2

  # 禁止变量初始化为 undefined
  no-undef-init: 2

  # 禁止将 undefined 作为标识符
  no-undefined: 0

  # 禁止未使用的变量
  no-unused-vars:
    - 2
    - args: none

  # 禁止定义前使用
  no-use-before-define: [1, {functions: false, variables: true, classes: true}]

  # ====================
  # Node.js and CommonJS
  # `https://eslint.org/docs/rules/#nodejs-and-commonjs`

  # 要求回调函数里面有 return 语句
  callback-return: 0

  # 要求 require 出现在顶部
  global-require: 0

  # 强制回调错误处理
  handle-callback-err: 0

  # 禁用 Buffer 构造函数
  # 通过 Buffer.alloc 等方法进行调用
  no-buffer-constructor: 0

  # 禁止 require 与普通变量声明混合使用
  no-mixed-requires: 0

  # 禁用 new require
  no-new-require: 2

  # 禁止对 __dirname 和 __filename 进行直接字符串拼接
  # 推荐使用 path.join 和 path.resolve 替代
  no-path-concat: 0

  # 禁用 process.env
  no-process-env: 0

  # 禁用 process.exit
  no-process-exit: 0

  # 禁用指定的模块
  no-restricted-modules: 0

  # 禁用同步方法
  no-sync: 0

  # ================
  # Stylistic Issues
  # `https://eslint.org/docs/rules/#stylistic-issues`

  # 数组中的括号和换行
  array-bracket-newline: 0

  # 数组中使用风格统一的空格
  array-bracket-spacing: [2, never]

  # 数组元素的换行
  array-element-newline: 0

  # 代码块内花括号的空格
  block-spacing: 2

  # 花括号风格
  brace-style: [2, 1tbs, {allowSingleLine: true}]

  # 使用驼峰拼写
  camelcase: 0

  # 注释首字母大写
  capitalized-comments: 0

  # 禁止拖尾逗号
  comma-dangle: 0

  # 逗号周围的空格
  # 默认逗号前无空格，逗号后一个空格
  comma-spacing: 2

  # 逗号风格
  # 直接跟随，不另起一行出现在第一个位置
  comma-style: 2

  # 计算属性中使用空格
  # 默认禁止使用
  computed-property-spacing: 2

  # 一致的 this
  consistent-this: 0

  # 文件末尾空行
  eol-last: 2

  # 函数调用时的括号与函数名中间的空格
  # 默认禁止使用空格
  func-call-spacing: 2

  # 要求函数表达式命名与变量名匹配
  func-name-matching: 0

  # 命名函数表达式
  func-names: 0

  # 函数声明或者表达式风格统一
  func-style: 0

  # 函数参数的位置
  function-paren-newline: 0

  # 禁止指定的标识符
  id-blacklist: 0

  # 标识符的最大长度
  id-length: 0

  # 标识符匹配正则表达式
  id-match: 0

  # 箭头函数的函数体换行
  # 默认不换行
  implicit-arrow-linebreak: 2

  # 缩进风格
  # 这里使用两个空格作为缩进
  indent: [2, 2, {SwitchCase: 1}]

  # JSX 中属性使用一致的引号
  jsx-quotes: 0

  # 对象字面量的键和值之间的空格
  key-spacing: 2
  # key-spacing:
  #   - 2
  #   - beforeColon: false
  #     afterColon: true

  # 关键字前后的空格
  keyword-spacing: 2

  # 行内注释的位置
  line-comment-position: 0

  # 换行符风格
  linebreak-style: 0

  # 要求注释周围有空行
  lines-around-comment: 0

  # class 里面的成员之间使用空行隔开
  lines-between-class-members: 0

  # 可嵌套的块的最大深度
  max-depth: 0

  # 一行的最大长度
  max-len: 0

  # 最大的行数
  max-lines: 0

  # 函数的最大行数
  max-lines-per-function: 0

  # 回调最大嵌套数
  max-nested-callbacks: 0

  # 最多允许的函数参数的个数
  max-params: 0

  # 函数块中最多允许的语句数量
  max-statements: 0

  # 每一行允许的最大语句数量
  max-statements-per-line: 0

  # 多行注释
  multiline-comment-style: 0

  # 使用多行模式的三目运算符
  multiline-ternary: 0

  # 构造函数首字母大写
  new-cap: 0
  # new-cap: [2, {capIsNewExceptionPattern: $.*}]

  # 调用无参数构造函数时带括号
  new-parens: 2

  # 链式调用时换行
  newline-per-chained-call: 0

  # 禁用 Array 构造函数
  no-array-constructor: 2

  # 禁用按位运算
  no-bitwise: 0

  # 禁用 continue
  no-continue: 0

  # 禁止代码内联注释
  no-inline-comments: 0

  # 禁止单独的 if 语句作为 else 语句块
  no-lonely-if: 1

  # 禁止混合使用不同的操作符
  no-mixed-operators: 0
  # no-mixed-operators: 1

  # 禁止空格和 tab 的混合缩进
  no-mixed-spaces-and-tabs: 2

  # 禁止链式声明
  no-multi-assign: 1

  # 禁止多个空行
  no-multiple-empty-lines: [2, {max: 4, maxEOF: 4, maxBOF: 4}]

  # 禁止否定表达式
  no-negated-condition: 1

  # 禁止嵌套三元表达式
  no-nested-ternary: 0

  # 禁用 Object 构造函数
  no-new-object: 2

  # 禁用自增和自减
  no-plusplus: 0

  # 禁止指定的语法
  no-restricted-syntax: 0

  # 禁止 tab
  no-tabs: 2

  # 禁用三元操作符
  no-ternary: 0

  # 禁止拖尾空格
  no-trailing-spaces: 2

  # 禁止悬空下划线
  no-underscore-dangle: 0

  # 禁止不必要的三元操作符
  no-unneeded-ternary: 1

  # 禁止属性前的空白
  no-whitespace-before-property: 2

  # 单行语句的位置
  nonblock-statement-body-position: 0

  # 花括号内的换行符
  object-curly-newline: 0

  # 对象花括号内的空格
  object-curly-spacing: 0

  # 对象属性在不同的行上
  object-property-newline: 0

  # 变量声明要么在同一行，要么分别分开
  one-var: 0

  # 变量声明周围换行
  one-var-declaration-per-line: 0

  # 尽可能的简化赋值操作
  operator-assignment: 0

  # 操作符换行风格统一
  operator-linebreak: 0

  # 块内填充
  padded-blocks: 0

  # 语句之间填充
  padding-line-between-statements: 0

  # 使用在 Object.assign 中使用对象展开运算符
  prefer-object-spread: 0

  # 对象字面量属性名使用括号括起来
  quote-props: 0

  # 使用风格一致的反勾号、双引号或单引号
  quotes: [2, single]
  # quotes: 0

  # 分号
  # semi: [2, always, {omitLastInOneLineBlock: true}]
  semi: 0

  # 分号前后的空格
  semi-spacing: [2, {before: false, after: true}]

  # 分号的位置
  semi-style: 2

  # 对象字面量中的键进行排序
  sort-keys: 0

  # 声明变量时排序
  sort-vars: 0

  # 语句块前后的空格
  space-before-blocks: [2, always]

  # 函数圆括号之前的空格
  space-before-function-paren:
    - 2
    - anonymous: always
      named: never
      asyncArrow: always

  # 圆括号内的空格
  space-in-parens: 2

  # 中缀操作符周围的空格
  space-infix-ops: 2

  # 一元操作符前后的空格
  space-unary-ops: [2, {words: true, nonwords: false}]

  # 注释中的空格
  spaced-comment:
   - 2
   - always
   - line:
       markers: ["/"]
       exceptions: ["-", "+"]
     block:
       markers: ["!"]
       exceptions: ["*"]
       balanced: true

  # switch 语句中冒号前后的空格
  switch-colon-spacing: 2

  # 模板字符调用时的空格
  # 函数可以直接跟模板字符串作为参数进行调用，无需括号
  # 默认为 never，不使用空格
  template-tag-spacing: 2

  # 使用 Unicode 字节顺序标记
  unicode-bom: 0

  # 将正则表达式字面量括起来
  wrap-regex: 0

  # ============
  # ECMAScript 6
  # `https://eslint.org/docs/rules/#ecmascript-6`

  # 箭头函数体使用花括号
  # 默认值为 as-needed，能省则省
  arrow-body-style: 1

  # 箭头函数的参数使用圆括号
  # 默认要求使用圆括号
  # as-needed 表示能省则省
  # requireForBlockBody 参数表示函数体带花括号
  # false 表示关闭，单参数也不要带括号
  arrow-parens: [2, as-needed, {requireForBlockBody: false}]

  # 箭头函数的箭头前后的空格
  # 默认前后都要有空格
  arrow-spacing: 2

  # 构造函数中使用 super
  constructor-super: 1

  # 生成器构造函数的 * 号周围的空格
  generator-star-spacing: [2, before]

  # 禁止修改类声明的变量
  no-class-assign: 2

  # 禁止使用令人困惑的箭头函数
  no-confusing-arrow: 2

  # 禁止修改 const 变量
  no-const-assign: 2

  # 禁止类成员的名称重复
  no-dupe-class-members: 2

  # 禁止重复的 import
  no-duplicate-imports: 2

  # 禁用 new Symbol
  no-new-symbol: 2

  # 禁止指定模块的 import
  no-restricted-imports: 0

  # 禁止在构造函数中，在调用 super() 之前使用 this 或 super
  no-this-before-super: 2

  # 禁止不必要的计算属性
  no-useless-computed-key: 2

  # 禁止不必要的构造函数
  no-useless-constructor: 0

  # 禁止修改 import、export、解构声明的名字重复
  no-useless-rename: 0

  # 使用 let 或 const 来替代 var
  no-var: 0

  # 对象字面量简写
  object-shorthand: 0

  # 使用箭头函数作为回调
  prefer-arrow-callback: 0

  # 强制使用 const 声明不可变变量
  prefer-const: 0

  # 强制对数组和对象使用解构
  prefer-destructuring: 0

  # 禁止使用 parseInt 来表示二进制、八进制和十六进制数值
  prefer-numeric-literals: 0

  # 强制使用余参
  prefer-rest-params: 0

  # 强制使用展开运算符
  prefer-spread: 0

  # 强制使用模板变量来拼接字符串
  prefer-template: 0

  # 要求 generator 函数内有 yeild
  require-yield: 2

  # ... 运算符后的空格
  # 默认不要空格
  rest-spread-spacing: 2

  # import 排序
  sort-imports: 0

  # 使用 Symbol 时指定描述
  symbol-description: 2

  # 模板变量中花括号前后的空格
  # 默认禁止空格
  template-curly-spacing: 2

  # yield* 表达式中 * 前后的空格
  yield-star-spacing: [2, after]
